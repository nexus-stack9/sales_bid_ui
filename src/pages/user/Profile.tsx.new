import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { useIsMobile } from '@/hooks/use-mobile';
import { User, LogOut, Package, MapPin } from 'lucide-react';
import Cookies from 'js-cookie';
import { getProfileDetails, getUserIdFromToken, getUserOrders } from '@/services/crudService';
import { format } from 'date-fns';

// Types
interface Order {
  id: string;
  itemName: string;
  imageUrl: string;
  bidAmount: number;
  status: 'paid' | 'shipped' | 'delivered' | 'cancelled';
  orderDate: Date;
  estimatedDelivery?: Date;
  items: number;
  total: number;
  orderId: string;
}

interface ProfileDetails {
  profile: {
    user: {
      userId: number;
      firstName: string;
      lastName: string;
      email: string;
      phone: string;
    };
  };
  message: string;
}

const Profile = () => {
  const { toast } = useToast();
  const navigate = useNavigate();
  const isMobile = useIsMobile();
  
  // State
  const [activeTab, setActiveTab] = useState<'profile' | 'orders'>('profile');
  const [isLoading, setIsLoading] = useState(true);
  const [isOrdersLoading, setIsOrdersLoading] = useState(false);
  const [userOrders, setUserOrders] = useState<Order[]>([]);
  const [profileDetails, setProfileDetails] = useState<ProfileDetails | null>(null);

  // Format order status for display
  const formatOrderStatus = (status: string): string => {
    switch (status) {
      case 'paid': return 'Paid';
      case 'shipped': return 'Shipped';
      case 'delivered': return 'Delivered';
      case 'cancelled': return 'Cancelled';
      default: return 'Processing';
    }
  };

  // Get status badge class based on order status
  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case 'delivered': return 'bg-green-100 text-green-800 border-green-200';
      case 'shipped': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'paid': return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'cancelled': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  // Handle tab change
  const handleTabChange = async (tab: 'profile' | 'orders') => {
    setActiveTab(tab);
    
    if (tab === 'orders') {
      await fetchUserOrders();
    }
  };

  // Fetch user orders
  const fetchUserOrders = async () => {
    try {
      setIsOrdersLoading(true);
      const userId = getUserIdFromToken();
      if (!userId) {
        navigate('/auth/signin');
        return;
      }
      
      const response = await getUserOrders(userId);
      if (response.success) {
        // Transform API response to match our Order type
        const formattedOrders = (response.data || []).map((order: any) => ({
          id: order.order_id?.toString() || '',
          itemName: order.name || 'Unnamed Product',
          imageUrl: order.image_path || 'https://via.placeholder.com/300x200',
          bidAmount: parseFloat(order.final_price) || 0,
          status: formatOrderStatus(order.order_status?.toLowerCase() || '').toLowerCase() as Order['status'],
          orderDate: order.order_date ? new Date(order.order_date) : new Date(),
          estimatedDelivery: order.delivery_date ? new Date(order.delivery_date) : undefined,
          items: order.quantity || 1,
          total: parseFloat(order.final_price) || 0,
          orderId: `ORD-${order.order_id?.toString().padStart(5, '0') || '00000'}`
        }));
        
        setUserOrders(formattedOrders);
      }
    } catch (error) {
      console.error('Error fetching orders:', error);
      toast({
        variant: 'destructive',
        title: 'Error',
        description: 'Failed to load your orders. Please try again later.',
      });
    } finally {
      setIsOrdersLoading(false);
    }
  };

  // Fetch profile details
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        setIsLoading(true);
        const userId = getUserIdFromToken();
        if (!userId) {
          navigate('/auth/signin');
          return;
        }
        
        const data = await getProfileDetails(userId);
        setProfileDetails(data);
      } catch (error) {
        console.error('Error fetching profile:', error);
        toast({
          variant: 'destructive',
          title: 'Error',
          description: 'Failed to load profile details. Please try again later.',
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchProfile();
  }, [navigate, toast]);

  // Handle logout
  const handleLogout = () => {
    Cookies.remove('authToken');
    toast({
      title: 'Logged out',
      description: 'You have been successfully logged out.',
    });
    navigate('/');
  };

  // Get user initials for avatar
  const getUserInitials = () => {
    const firstName = profileDetails?.profile?.user?.firstName || '';
    const lastName = profileDetails?.profile?.user?.lastName || '';
    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase() || 'U';
  };

  // Render loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <div className="flex flex-col md:flex-row gap-8">
        {/* Sidebar */}
        <div className="w-full md:w-64 flex-shrink-0">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex flex-col items-center mb-6">
              <div className="w-20 h-20 rounded-full bg-gray-200 flex items-center justify-center text-2xl font-semibold text-gray-600 mb-3">
                {getUserInitials()}
              </div>
              <h2 className="text-lg font-semibold">
                {profileDetails?.profile.user.firstName} {profileDetails?.profile.user.lastName}
              </h2>
              <p className="text-sm text-gray-500">{profileDetails?.profile.user.email}</p>
            </div>

            <nav className="space-y-2">
              <button
                onClick={() => handleTabChange('profile')}
                className={`w-full flex items-center px-4 py-2 text-sm font-medium rounded-md ${
                  activeTab === 'profile' ? 'bg-gray-100 text-primary' : 'text-gray-700 hover:bg-gray-50'
                }`}
              >
                <User className="mr-3 h-5 w-5" />
                Profile
              </button>
              <button
                onClick={() => handleTabChange('orders')}
                className={`w-full flex items-center px-4 py-2 text-sm font-medium rounded-md ${
                  activeTab === 'orders' ? 'bg-gray-100 text-primary' : 'text-gray-700 hover:bg-gray-50'
                }`}
              >
                <Package className="mr-3 h-5 w-5" />
                My Orders
              </button>
              <button
                onClick={handleLogout}
                className="w-full flex items-center px-4 py-2 text-sm font-medium text-red-600 rounded-md hover:bg-red-50"
              >
                <LogOut className="mr-3 h-5 w-5" />
                Logout
              </button>
            </nav>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1">
          {activeTab === 'profile' ? (
            <div className="bg-white rounded-lg shadow p-6">
              <h1 className="text-2xl font-bold mb-6">My Profile</h1>
              
              <div className="space-y-6">
                <div>
                  <h2 className="text-lg font-semibold mb-4">Personal Information</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                      <div className="mt-1">{profileDetails?.profile.user.firstName}</div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                      <div className="mt-1">{profileDetails?.profile.user.lastName}</div>
                    </div>
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                      <div className="mt-1">{profileDetails?.profile.user.email}</div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                      <div className="mt-1">{profileDetails?.profile.user.phone || 'Not provided'}</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="bg-white rounded-lg shadow">
              <div className="p-6 border-b">
                <h1 className="text-2xl font-bold">My Orders</h1>
                <p className="text-gray-500 mt-1">View and track your orders</p>
              </div>

              {isOrdersLoading ? (
                <div className="p-6 space-y-4">
                  {[1, 2, 3].map((i) => (
                    <div key={i} className="animate-pulse flex space-x-4 p-4 border rounded-lg">
                      <div className="h-20 w-20 bg-gray-200 rounded"></div>
                      <div className="flex-1 space-y-2">
                        <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                        <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                        <div className="h-4 bg-gray-200 rounded w-1/4"></div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : userOrders.length > 0 ? (
                <div className="divide-y">
                  {userOrders.map((order) => (
                    <div key={order.id} className="p-6 hover:bg-gray-50">
                      <div className="flex flex-col md:flex-row md:items-center justify-between mb-4">
                        <div>
                          <div className="flex items-center space-x-2">
                            <span className="font-medium">Order #{order.orderId}</span>
                            <span className={`px-2 py-1 text-xs rounded-full ${getStatusBadgeClass(order.status)}`}>
                              {formatOrderStatus(order.status)}
                            </span>
                          </div>
                          <p className="text-sm text-gray-500 mt-1">
                            Ordered on {format(new Date(order.orderDate), 'MMM d, yyyy')}
                          </p>
                        </div>
                        <div className="mt-2 md:mt-0 text-right">
                          <p className="font-medium">${order.total.toFixed(2)}</p>
                          <p className="text-sm text-gray-500">{order.items} item{order.items > 1 ? 's' : ''}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-4">
                        <div className="w-20 h-20 bg-gray-100 rounded overflow-hidden flex-shrink-0">
                          <img
                            src={order.imageUrl}
                            alt={order.itemName}
                            className="w-full h-full object-cover"
                            onError={(e) => {
                              (e.target as HTMLImageElement).src = 'https://via.placeholder.com/300x200';
                            }}
                          />
                        </div>
                        <div>
                          <h3 className="font-medium">{order.itemName}</h3>
                          <p className="text-sm text-gray-500">Winning bid: ${order.bidAmount.toFixed(2)}</p>
                          {order.estimatedDelivery && (
                            <p className="text-sm text-gray-500 mt-1">
                              Est. delivery: {format(new Date(order.estimatedDelivery), 'MMM d, yyyy')}
                            </p>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="p-12 text-center">
                  <Package className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-lg font-medium text-gray-900">No orders</h3>
                  <p className="mt-1 text-sm text-gray-500">You haven't placed any orders yet.</p>
                  <div className="mt-6">
                    <button
                      onClick={() => navigate('/auctions')}
                      className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
                    >
                      Browse Auctions
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Profile;
